<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.yudao.module.dataqc.dal.mysql.batchimport.BatchImportTaskDetailMapper">

    <resultMap id="BaseResultMap" type="cn.iocoder.yudao.module.dataqc.dal.dataobject.batchimport.BatchImportTaskDetailDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="task_id" jdbcType="BIGINT" property="taskId"/>
        <result column="task_no" jdbcType="VARCHAR" property="taskNo"/>
        <result column="file_type" jdbcType="VARCHAR" property="fileType"/>
        <result column="file_name" jdbcType="VARCHAR" property="fileName"/>
        <result column="table_name" jdbcType="VARCHAR" property="tableName"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="total_rows" jdbcType="INTEGER" property="totalRows"/>
        <result column="success_rows" jdbcType="INTEGER" property="successRows"/>
        <result column="fail_rows" jdbcType="INTEGER" property="failRows"/>
        <result column="start_time" jdbcType="TIMESTAMP" property="startTime"/>
        <result column="end_time" jdbcType="TIMESTAMP" property="endTime"/>
        <result column="error_msg" jdbcType="LONGVARCHAR" property="errorMsg"/>
        <result column="error_detail" jdbcType="LONGVARCHAR" property="errorDetail"/>
        <result column="import_batch_no" jdbcType="VARCHAR" property="importBatchNo"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>

    <!-- 根据任务ID查询明细列表 -->
    <select id="selectByTaskId" resultMap="BaseResultMap">
        SELECT *
        FROM system_batch_import_task_detail
        WHERE task_id = #{taskId}
        ORDER BY create_time ASC
    </select>

    <!-- 查询指定任务的失败明细 -->
    <select id="selectFailedDetailsByTaskId" resultMap="BaseResultMap">
        SELECT *
        FROM system_batch_import_task_detail
        WHERE task_id = #{taskId}
          AND status = 3 -- 失败状态
        ORDER BY create_time ASC
    </select>

    <!-- 统计指定任务的处理情况 -->
    <select id="selectTaskProcessingSummary" resultType="map">
        SELECT
            COUNT(*) as total_files,
            SUM(CASE WHEN status = 0 THEN 1 ELSE 0 END) as pending_files,
            SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) as processing_files,
            SUM(CASE WHEN status = 2 THEN 1 ELSE 0 END) as success_files,
            SUM(CASE WHEN status = 3 THEN 1 ELSE 0 END) as fail_files,
            SUM(total_rows) as total_rows,
            SUM(success_rows) as success_rows,
            SUM(fail_rows) as fail_rows,
            ROUND(
                    CASE WHEN SUM(total_rows) > 0
                             THEN (SUM(success_rows) * 100.0 / SUM(total_rows))
                         ELSE 0 END, 2
            ) as success_rate
        FROM system_batch_import_task_detail
        WHERE task_id = #{taskId}
    </select>

    <!-- 批量更新明细状态 -->
    <update id="updateStatusByTaskIdAndFileType">
        UPDATE system_batch_import_task_detail
        SET status = #{status}
        WHERE task_id = #{taskId}
          AND file_type = #{fileType}
    </update>

    <!-- 查询文件类型处理统计 -->
    <select id="selectFileTypeStatistics" resultType="map">
        SELECT
            file_type,
            COUNT(*) as total_count,
            SUM(CASE WHEN status = 2 THEN 1 ELSE 0 END) as success_count,
            SUM(CASE WHEN status = 3 THEN 1 ELSE 0 END) as fail_count,
            ROUND(
                    CASE WHEN COUNT(*) > 0
                             THEN (SUM(CASE WHEN status = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*))
                         ELSE 0 END, 2
            ) as success_rate,
            SUM(total_rows) as total_rows,
            SUM(success_rows) as success_rows,
            SUM(fail_rows) as fail_rows,
            ROUND(AVG(CASE
                          WHEN start_time IS NOT NULL AND end_time IS NOT NULL
                              THEN TIMESTAMPDIFF(SECOND, start_time, end_time)
                          ELSE NULL
                END), 2) as avg_duration_seconds
        FROM system_batch_import_task_detail
        WHERE create_time >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        GROUP BY file_type
        ORDER BY total_count DESC
    </select>

</mapper>